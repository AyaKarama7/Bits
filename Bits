 prefix xor == prefix sum problems
 the maximum possible XOR result is always 2^(maximumBit) - 1
 prefix xor and Bitmanipulation problem:https://leetcode.com/problems/maximum-xor-for-each-query/
 prefix xor and Bitmanipulation problem:https://leetcode.com/problems/count-triplets-that-can-form-two-arrays-of-equal-xor/submissions/
 search a code to solve previous problem in O(1),example:https://lydxlx1.github.io/blog/2020/05/17/leetcode-1442/
 problem to solve :
 https://leetcode.com/problems/find-the-longest-substring-containing-vowels-in-even-counts/
 https://www.codechef.com/submit/ORTUPLES
 https://www.codechef.com/START55D/problems/NZXOR
 https://www.codechef.com/START55D/problems/BALLSEQ
 https://leetcode.com/contest/biweekly-contest-87/problems/smallest-subarrays-with-maximum-bitwise-or/
 -In many problem we use subset code,andone loop for summ or others
 ***************************************************************************************************************************************
 BITS
 CONTENT:
 1-Benifits
 2-& and , | or , ^ xor , ~ not
 3-Shift (pow,div,mod)
 4-Check if num is even
 5-print binary representation
 6-flip first bit from right or flip all bits except first bit from right
 7-Count bits = 1 
 8-GetBit
 9-setbit1
 10-setbit0
 11-flip bit
 12-rotate Bits
 13-print all subset(strings) of lenghth<=len = 2^len-1 or number of bits =1 <=len
 14-Gray Code
 15-precedence
 16-print submasks
 17-Given 2 arrays A and B ,output how many nums are in both A and B (intersection)
 18-bool visits
 19-bitset
 20-check if number is pos or neg
 21-counting traling and leading zeros
 22-find xor
 ***************************************************************************************************************************************
 1-Benifits
 Sometimes, it is low-level optimization, so better time order
 Sometimes, it drop memory by factor of 8! so better memory order
 Sometimes, it make code shorter
 Based 0
 ***************************************************************************************************************************************
 2-& and , | or , ^ xor , ~ not :
 A B !A A&B A|B 	A^B
	0	0	 1	 0		 0	 	0
	0	1	 1	 0		 1	 	1
	1	0	 0	 0		 1		 1
	1	1	 0	 1		 1		 0
 and : all give 0 , but (1&1) give 1
 or  : all give 1 , but (0&0) give 0
 xor : A=B-->0 , A!=B=1
 neg : flip
 A ^ B ^ C ^ D = E	For any bit in E with 1, must be ODD number of 1s ---> 1^1^1^0=1 but 1^1^1^1=0
 X ^ 0 = X		
 X ^ X = 0 , so: (A ^ B ^ C ^ D ^ E) ^ (A ^ B ^ C) = D ^ E
*****************************************************************************************************************************************
 3-Shift (pow,div,mod):
 x >> i == x/ pow(2,i) --->ex:x>>1=x/2 ,x>>2=x/4  ----->remove last bit , ex: 4>>1=4/2=2-->4=100 and 2=10, so we have removed last bit
 x << i == x* pow(2,i) --->ex:x<<1=x*2 ,x<<2=x*4  ----->add bit=0 at the last, ex: 2<<1=2*2=4, 2=10 become 4=100 ,ex:3>>1=3*2=6,3=11 become 6 =110
*****************************************************************************************************************************************
 4-Check if num is even :
 if (num&1)-->odd ,else even
******************************************************************************************************************************************
 5-print binary representation:
 void printNumber(int n)
 {
   if(!n)return;
	  printNumber(n>>1);	// remove last bit
	  cout<<(n&1);						// print last bit
 }
 print lenght x code:
 void printNumber(int n, int len)//n=1 ,len=5-->output =00001
 {
 	if(!len)
		return ;

	 printNumber(n>>1, len-1);	// remove last bit
	 cout<<(n&1);						// print last bit
 }
******************************************************************************************************************************************
 6-flip first bit from right or flip all bits except first bit from right:
 X-1 is very important!
 X = 840 = 01101001000  x-1 = flip all bits until first right bit=1
 X-1= 839 = 01101000111		What happened? First bit 16=(2^3) is removed, and 15=2^3-1 is added.
 X & (X-1) 	= 01101000000		first bit from right removed or flip first bit from right
 X & ~(X-1) 	= 01101001000 & 10010111000 = 00000001000	value of 1<<SmaintestBitIdx or flip all bits except first bit from right
******************************************************************************************************************************************
7-Count bits = 1 :
 int countNumBits1(int mask) {	// O(bits Length)
	int ret = 0;	//1101001 -> 110100 -> 11010 -> 1101 -> 110 -> 11 -> 1 -> 0
	while (mask) {
		if(mask&1)
			ret++;
		mask >>= 1;
	}
	return ret;
}
-More efficient code based on role 6 :
int countNumBits2(int mask) {	//	O(bits Count)		__builtin_popcount--->also used to count bits=1
	int ret = 0;
	while (mask) 	{
		mask &= (mask-1);//filb first bit =0 from right
		++ret;	// Simply remove the last bit and so on
	}
	return ret;
}
******************************************************************************************************************************************
8-GetBit:
int getBit(int num, int idx) {
  return ((num >> idx) & 1) == 1;		// 110100, idx = 4  -->  110 & 1 = 0 //remove bits before idx then get idx value
}
******************************************************************************************************************************************
9-setbit1:
int setBit1(int num, int idx) {// num=2-->10 idx=0 -->3=11
	return num | (1<<idx);//10 | pow(2,0)=10 |01 = 11 //if zero base idx-1
}
******************************************************************************************************************************************
10-setbit0:
int setBit0(int num, int idx) {
	return num & ~(1<<idx);				// 110100, idx = 3  -->  110100 & ~000100 = 110100 & 111011 //if zero base idx-1
}
******************************************************************************************************************************************
11-flip bit:
int flipBit(int num, int idx) {
	return num ^ (1<<idx);////if zero base idx-1
}
******************************************************************************************************************************************
12-rotate Bits:make last d bits be first d bits and first be last ,ex:0000000000000000000011001101110 -> rotate 5 -> 0111000000000000000000000110011
Left:
int leftRotate(int n, unsigned int d)
{   /*n=3=00011,d=2,out=11000
     n<<d n*pow(2,d)to make first d bits = last removed-->1100
     INT_BITS=total number of bits =5
     n >> (INT_BITS - d)to remove last d bits-->000*/
    return (n << d)|(n >> (INT_BITS - d));
}
Right:
int rightRotate(int n, unsigned int d)
{
    return (n >> d)|(n << (INT_BITS - d));
}
******************************************************************************************************************************************
13-print all subset(strings) of lenghth<=len = 2^len-1 or number of bits =1 <=len:
void printAllSubsets(int len)//len=3-->000 001 010 011 100 101 110 111 
{
     //if you have arr= 1 2 3 -->all subsets= 000-->take no ele,001-->take first ele,010--->take second el,011-->take first and second ele....
	for (int i = 0; i < (1<<len); ++i)
		printNumber(i, len);

	// For reversed order. Either reverse each item or work from big to small
	//for (int i = (1<<len); i >= 0 ; --i)
	//	printNumber(i, len);
}
******************************************************************************************************************************************
14-Gray Code:  is a binary numeral system where two successive values differ in only one bit
 (1)   (2)(3)
0000		0000	0    (1)-->represents numbers in ordenary system  (2)represents numbers in Gray system (3)number of bits=1
0001		0001	1
0010		0011	2
0011		0010	1
0100		0110	2
0101		0111	3
0110		0101	2
0111		0100	1
1000		1100	2
1001		1101	3
1010		1111	4
1011		1110	3
1100		1010	2
1101		1011	3
1110		1001	2
1111
Code:
int grayCode(int i) {
	return i ^ (i>>1);
}

void printAllSubsetsGray(int len)
{
	for (int i = 0; i < (1<<len)-1; ++i)
	{
		printNumber(i, len );
		cout<<"\t\t";

		printNumber( grayCode(i), len );

		cout<<"\t"<<__builtin_popcount(grayCode(i));//number of ones
		cout<<"\n";
	}
}
******************************************************************************************************************************************
15-precedence:
Be careful with operators precedence problems. http://en.wikipedia.org/wiki/Operators_in_C_and_C%2B%2B#Operator_precedence
X & 7 == 1 		is interpreted as 			X & (7 == 1)	--> (X & 7) == 1
1<<10 -1 		is interpreted as			= 1<<9			--> (1<<10) - 1
Watch out from overflow
1 << 60 Fails. 1 is 32 bitInteger		-->		1LL << 60
<< or >>-->نفز قبل --->&
******************************************************************************************************************************************
16-print submasks:
void getAllSubMasks(int mask) {//3 --->00011 ,00010 ,00001//5 ---->00101 , 00100 , 00001//4--->00100

	for(int subMask = mask ; subMask ; subMask = (subMask - 1) & mask)
		printNumber(subMask, 5),cout<<' ';	// this code doesn't print 0

	// For reverse: ~subMask&mask = subMask^mask
}
conditions:
The set of the digit positions containing 1 in the binary representation of submask is a subset 
of the set of the digit positions containing 1 in the binary representation of mask.
That is, the following holds for every non-negative integer k: if the digit in the "2^k s" place of submask is 1, the digit in the 2^ks place of mask is 1.
******************************************************************************************************************************************
17-Given 2 arrays A and B ,output how many nums are in both A and B (intersection):
void intersection(int A[60], int len1, int B[60], int len2)//A:1 2 3  B:2 4 3
{
	int mask1 = 0;//0 0 0 0 0 ...
	int mask2 = 0;//0 0 0 0 0 ...
	for (int i = 0; i < len1; ++i)
		mask1 = setBit1(mask1, A[i]);//0 1 0 0 0 -->0 1 1 0 0 --->0 1 1 1 0

	for (int i = 0; i < len2; ++i)
		mask2 = setBit1(mask2, B[i]);//0 0 1 0 0 -->0 0 1 0 1 --->0 0 1 1 1

	int inter = mask1 & mask2;//0 0 1 1 0	// In O(1) noes intersection

	for (int i = 0; i <= max(len1, len2); ++i) {
		if(getBit(inter, i))
			cout<<i<<" ";
	}
	cout<<"\n";
}
****************************************************************************************************************************************
18-
Better Memory
Say you have numbers in range 100 Milion, and you want to know if some number visited before or NOT
Simply: bool vis[100 * 1000 * 1000];	// and mark in it.

But 100 Milion is too much! What about 100Milion / 8 = 12500000	12 Milion and half!
You know that each character is 8 bits. Bool too takes 8 bits. UTILIZE byte!

const int MAX = 100000000;
char vis[MAX/8 + 1];

void setVisited(int i) {	// in past vis[i] = 1
	// Now each byte is responsible for 8 bits.
	// So first we need to know which char is for us. Then my byte is in i / 8
	// And then which bit with us. Any inside this byte i am is i % 8

	vis[i/8] |= ( 1<<(i % 8) );

	// Or more efficiently
	vis[i>>3] |= ( 1<<(i&7) );
}

bool isVisited(int i) {	// in past if(vis[i])
	return vis[i>>3] & (1<<(i&7));
}
****************************************************************************************************************************************
19-bitset:
#include <bitset>		// The power, speed and memory handling in one place

void STL() {
	const int N = 20;		// const
	string s = "000111";
	bitset<N> x(s);			// 00000000000000000111 bitset<size>name(value)
	x.set();				// 11111111111111111111
	x.flip();				// 00000000000000000000

	x = 10;					// 00000000000000001010
	x |= 3;					// 00000000000000001011
	x = (x<<3);				// 00000000000001011000
	x = ~x;					// 11111111111110100111
	x.set(15, 0);			// 11110111111110100111
	x.set(15);				// 11111111111110100111
	x.flip(0);				// 11111111111110100110
	x.count();				// Returns the number of bits that are set.
	x.any();				// Returns true if any bits are set.
	x.none();				// Returns true if no bits are set.
	x.test(15);
	x.to_ulong();			// Returns an unsigned long represent mask (decimal value)
        x.to_string();
	// The most interesting
	if(x[2] == 0)
		;

	x[0] = 1;	// Set bit from most right to 1
	x[N-1] = 0;	// Set bit from most left to 0

	cout<<x<<"\n";			// display a string of N bits
}
****************************************************************************************************************************************
20-check if number is pos or neg:
if last bit from left =0 then pos else neg.
****************************************************************************************************************************************
21-counting traling and leading zeros:
int cntt=__biltin_ctz(n);
int cntl=__biltin_clz(n);
****************************************************************************************************************************************
22-find xor:
if you have an array a=0 1 2 3 and b=4 5 6 7 ,find x which all(a)^x=b
solution:
0:3 --->4 7 6 5 ,0 1 2 3 -->7 6 5 4
       100 
       111 
       110 
       101 
       ----
       111
       -if num of ones > zeros --->i bit in x = 1 
       -if num of ones < zeros --->i bit in x = 0
       --if num of ones = zeros --->i bit in x = 1 or 0 


